{"version":3,"sources":["dogs.js","components/Card.js","components/DogProfile.js","components/Search.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["dogs","id","name","username","breed","location","Card","_ref","dogPicture","react_default","a","createElement","className","style","width","height","src","alt","concat","DogProfile","dogArray","map","value","i","components_Card","key","Search","searchField","searchChange","type","placeholder","onChange","Scroll","props","overflowY","border","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","e","setState","target","state","dogImg","_this2","fetch","then","res","json","data","message","_this$state","filterDogs","filter","dog","toLowerCase","includes","components_Search","components_Scroll","components_DogProfile","Component","Boolean","window","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0cc8460.chunk.js","sourcesContent":["export const dogs = [\n  {\n    id: 1,\n    name: 'Graham',\n    username: 'Bret',\n    breed: 'Akita',\n    location: 'Abuja'\n  },\n  {\n    id: 2,\n    name: 'Howell',\n    username: 'Antonette',\n    breed: 'American Foxhound',\n    location: 'Lagos'\n  },\n  {\n    id: 3,\n    name: 'Bauch',\n    username: 'Samantha',\n    breed: 'Korean Jindo Dog',\n    location: 'Owerri'\n  },\n  {\n    id: 4,\n    name: 'Lebsack',\n    username: 'Karianne',\n    breed: 'Kisshound',\n    location: 'Osun'\n  },\n  {\n    id: 5,\n    name: 'Dietrich',\n    username: 'Kamren',\n    breed: 'Komodor',\n    location: 'Akure'\n  },\n  {\n    id: 6,\n    name: 'Schulist',\n    username: 'Leopoldo_Corkery',\n    breed: 'Lakeland Terrier',\n    location: 'Enugu'\n  },\n  {\n    id: 7,\n    name: 'Weissnat',\n    username: 'Elwyn.Skiles',\n    breed: 'Maltese',\n    location: 'Abakaliki'\n  },\n  {\n    id: 8,\n    name: 'Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    breed: 'Norwegian Elkhound',\n    location: 'Akwa ibom'\n  },\n  {\n    id: 9,\n    name: 'Reichert',\n    username: 'Delphine',\n    breed: 'Otterhound',\n    location: 'Ogun'\n  },\n  {\n    id: 10,\n    name: 'DuBuque',\n    username: 'Moriah.Stanton',\n    breed: 'Peekapoo',\n    location: 'Kaduna'\n  }\n];\n","import React from 'react';\r\n\r\nconst Card = ({name, breed, id, location, dogPicture}) => {\r\n    return (\r\n        <div className = 'tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img style={{width: 300, height: 300}} src={dogPicture[id]} alt=\"dogs\"/>\r\n            <div>\r\n                <h2>{`NAME: ${name}`}</h2>\r\n                <p>{`BREED: ${breed}`}</p>\r\n                <p>{`LOCATION: ${location}`}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst DogProfile = ({dogs, dogPicture}) => {\r\n    const dogArray = dogs.map((value, i) =><Card dogPicture={dogPicture} key={dogs[i].id} id ={dogs[i].id} name ={dogs[i].name} breed ={dogs[i].breed} location ={dogs[i].location}/> )\r\n    \r\n    return(\r\n     <div>\r\n         {dogArray};\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default DogProfile;","import React from 'react';\r\n\r\nconst Search = ({searchField, searchChange}) =>{\r\n    return (\r\n        <div className=\"pa2\">\r\n        <input className=\"pa1 ba b--blue bg-lightest-blue\"\r\n         type=\"search\" \r\n         placeholder=\"Search for your dog's mating partner\"\r\n         onChange={searchChange}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style ={{overflowY: 'scroll', border: '5px solid black', height: '800px'}} >\r\n        {props.children};\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport {dogs} from '../dogs';\r\nimport DogProfile from '../components/DogProfile';\r\nimport Search from '../components/Search';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\n\r\nclass  App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            dogs: dogs,\r\n            searchField:\"\",\r\n            dogImg: []\r\n        }\r\n    }\r\n\r\n    onSearchChange = e => {\r\n        this.setState({searchField: e.target.value});\r\n    }\r\n    componentDidMount(){\r\n        fetch(`https://dog.ceo/api/breeds/image/random/11`)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            this.setState({ dogImg: data.message })\r\n        });\r\n        \r\n    }\r\n\r\n    render(){\r\n        const {searchField, dogs, dogImg} = this.state;\r\n        const filterDogs = dogs.filter(dog =>{\r\n            return dog.location.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        return (\r\n            <div className=\"tc\">\r\n                <h1 className=\"f1\">Dog Mate Finder</h1>\r\n                <Search searchChange ={this.onSearchChange}/>\r\n                <Scroll>\r\n                <DogProfile dogs ={filterDogs} dogPicture={dogImg}/>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}